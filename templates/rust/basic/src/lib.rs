// {{name}} WebAssembly Component
// Generated by wasm-wizard 🧙‍♂️

wit_bindgen::generate!({
    world: "{{name}}",
    exports: {
        world: Component,
    },
});

struct Component;

impl Guest for Component {
    fn greet(name: String) -> String {
        format!("Hello, {}! Welcome to WebAssembly Components! 🚀", name)
    }
    
    fn calculate(a: i32, b: i32) -> i32 {
        a + b
    }
    
    fn fibonacci(n: u32) -> u32 {
        match n {
            0 => 0,
            1 => 1,
            _ => fibonacci(n - 1) + fibonacci(n - 2),
        }
    }
    
    fn reverse_string(input: String) -> String {
        input.chars().rev().collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_greet() {
        let result = Component::greet("World".to_string());
        assert!(result.contains("Hello, World"));
    }

    #[test]
    fn test_calculate() {
        assert_eq!(Component::calculate(2, 3), 5);
    }

    #[test]
    fn test_fibonacci() {
        assert_eq!(Component::fibonacci(0), 0);
        assert_eq!(Component::fibonacci(1), 1);
        assert_eq!(Component::fibonacci(5), 5);
        assert_eq!(Component::fibonacci(10), 55);
    }

    #[test]
    fn test_reverse_string() {
        assert_eq!(Component::reverse_string("hello".to_string()), "olleh");
    }
}